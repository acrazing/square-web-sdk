/*
 * @since 2021-06-21 18:54:15
 * @author junbao <junbao@mymoement.com>
 */

const fs = require('fs-extra');
const cp = require('child_process');
const path = require('path');
const Axios = require('axios');
const html5 = require('html5parser');
const json2ts = require('json-to-ts');

/**
 * @param {string} k
 * @return {string}
 */
function parseKey(k) {
  return /^[a-z0-9_$]+$/i.test(k) ? k : `'${k}'`;
}

/**
 * @param {string} s
 * @return {string}
 */
function parseComment(s) {
  return s ? '\n  * ' + s.trim().replace(/\n */g, ($0) => $0 + '* ') : '';
}

/**
 * @param {P2} p
 * @param {boolean | number} [isVariable=false]
 * @param {boolean | any[]} [isTypeof=false]
 * @return {string}
 */
function parseProperty(p, isVariable, isTypeof) {
  return (
    (p.s ? `/**${parseComment(p.s)}\n */\n  ` : '') +
    (isVariable === true ? 'const ' : '') +
    `${parseKey(p.n)}${p.o ? '?' : ''}: ${p.t
      .map((t) => (isTypeof === true ? 'typeof ' : '') + parseType(t))
      .join(' | ')}`
  );
}

/**
 * @param {P3 | P4} p
 * @return {string}
 */
function parseParam(p) {
  return `${p.n}${p.o ? '?' : ''}: ${p.t.map(parseType).join(' | ')}`;
}

/**
 * @param {Er} e
 * @return {string}
 */
function parseError(e) {
  return e.e;
}

/**
 * @param {M3} m
 * @param {boolean | number} isVariable
 */
function parseMethod(m, isVariable) {
  return (
    `/**${[
      parseComment(m.s),
      parseComment(m.d),
      m.er?.length ? `\n * @throws {${m.er.map(parseError).filter(Boolean).join(' | ')}}` : '',
    ]
      .filter(Boolean)
      .join('\n *')} \n */\n` +
    (isVariable === true ? 'function ' : '') +
    `${parseKey(m.n)}(${m.p?.map(parseParam).join(', ') || ''}): ${m.rT.map(parseType).join(' | ') || 'void'}`
  );
}

/**
 * @param {T | T2 | T3 | T4 | T5 | T6 | T7 | T8 | T9 | T10 | T11 | T12 | T13 | T14 | T15 | T16} t
 */
function parseType(t) {
  switch (t.pT) {
    case 's':
      if (t.pV) {
        return `'${t.pV}'`;
      }
      if (t.enu) {
        return t.enu;
      }
      return 'string';
    case 'u':
      return 'undefined';
    case 'n':
      return 'number';
    case 'b':
      return 'boolean';
    case 'a':
      const ct = t.cT.map(parseType).join(' | ');
      return t.cT.length > 1 ? `Array<${ct}>` : ct + '[]';
    case 'o':
      if (typeof t.ent === 'string') {
        return t.ent;
      } else if (Array.isArray(t.cT)) {
        return `${t.ent.n}<${t.cT.map(parseType).join(' | ')}>`;
      }
      if (!t.ent) {
        return 'object';
      }
      return t.ent.n;
    case 'v':
      return 'void';
    case 'f':
      if (t.m) {
        return `((${t.m.p?.map(parseParam).join(', ') || ''}) => ${t.m.rT.map(parseType).join(' | ') || 'void'})`;
      }
      // FIXME: json-2-ts omits `t.ent.p` field
      return `{\n  ${t.ent.p.map(parseProperty).join(';\n  ')}\n}`;
    default:
  }
  console.log('parseType', t);
}

async function main() {
  const { data } = await Axios.get('https://developer.squareup.com/reference/sdks/web/payments', { maxRedirects: 2 });
  fs.outputFileSync(`${__dirname}/square_web_sdk_payments.html`, data);
  const ast = html5.parse(data);

  let script;
  html5.walk(ast, {
    enter(node, parent, index) {
      if (node.type === html5.SyntaxKind.Tag && node.name === 'script') {
        const content = node.body
          .map(function getContent(t) {
            if (t.type === html5.SyntaxKind.Tag) {
              return t.body.map(getContent).join('');
            }
            return t.value;
          })
          .join('');
        if (content.startsWith('__SAPPER__')) {
          script = content;
        }
      }
    },
  });

  /** @type {*} */
  let __SAPPER__;
  try {
    eval(script);
  } catch (e) {
    // ignore ReferenceError: document is not defined
  }

  if (!__SAPPER__) {
    throw new Error('Parse html failed, please check the script!');
  }

  /**
   * @type {RootObject}
   */
  const square_web_sdk_payments_sapper = __SAPPER__.preloaded[1].serializedGraph;

  fs.outputJSONSync(`${__dirname}/square_web_sdk_payments_sapper.json`, square_web_sdk_payments_sapper, { spaces: 2 });
  const dts = json2ts(square_web_sdk_payments_sapper);
  fs.outputFileSync(`${__dirname}/square_web_sdk_payments_sapper.d.ts`, dts.join('\n'));

  const out = [
    `/** This file is generated by ${path.relative(process.cwd(), __filename)}, please do not edit it. */`,
    '',
    'declare namespace __Square {',
  ];

  for (const ent of square_web_sdk_payments_sapper.ent) {
    if (ent.n === 'Window') {
      continue;
    }
    if (ent.n === 'Square') {
      if (ent.p) {
        out.push(ent.p.map((p) => parseProperty(p, true)).join(';\n\n') + '\n');
      }
      if (ent.m) {
        out.push(ent.m.map((p) => parseMethod(p, true)).join('; \n\n') + '\n');
      }
      continue;
    }
    out.push(`/**${[parseComment(ent.s), parseComment(ent.d)].filter(Boolean).join('\n  *')}\n */`);
    out.push(`${ent.k === 'c' ? 'class' : 'interface'} ${ent.n} {`);
    if (ent.p) {
      out.push(ent.p.map((p) => parseProperty(p, false, ent.n === 'PublicErrors')).join(';\n'));
    }
    if (ent.m) {
      out.push(ent.m.map(parseMethod).join(';\n'));
    }
    out.push(`}\n`);
  }

  for (const enu of square_web_sdk_payments_sapper.enu) {
    out.push(
      `/**${[parseComment(enu.s), parseComment(enu.d)].filter(Boolean).join('\n  *')}\n */\ntype ${enu.n} = ${enu.v
        .map((v) => v.v)
        .join(' | ')};\n`,
    );
  }

  out.push('}', '', 'export type Square = typeof __Square;');

  const file = './square.d.ts';
  fs.writeFileSync(file, out.join('\n'));
  cp.execSync(`yarn prettier --write ${file}`);
}

main();
